// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package departments_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DepartmentsServiceClient is the client API for DepartmentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepartmentsServiceClient interface {
	ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsResponse, error)
}

type departmentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDepartmentsServiceClient(cc grpc.ClientConnInterface) DepartmentsServiceClient {
	return &departmentsServiceClient{cc}
}

func (c *departmentsServiceClient) ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsResponse, error) {
	out := new(ListDepartmentsResponse)
	err := c.cc.Invoke(ctx, "/departmentsservice.DepartmentsService/listDepartments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepartmentsServiceServer is the server API for DepartmentsService service.
// All implementations must embed UnimplementedDepartmentsServiceServer
// for forward compatibility
type DepartmentsServiceServer interface {
	ListDepartments(context.Context, *ListDepartmentsRequest) (*ListDepartmentsResponse, error)
	mustEmbedUnimplementedDepartmentsServiceServer()
}

// UnimplementedDepartmentsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDepartmentsServiceServer struct {
}

func (UnimplementedDepartmentsServiceServer) ListDepartments(context.Context, *ListDepartmentsRequest) (*ListDepartmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartments not implemented")
}
func (UnimplementedDepartmentsServiceServer) mustEmbedUnimplementedDepartmentsServiceServer() {}

// UnsafeDepartmentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepartmentsServiceServer will
// result in compilation errors.
type UnsafeDepartmentsServiceServer interface {
	mustEmbedUnimplementedDepartmentsServiceServer()
}

func RegisterDepartmentsServiceServer(s grpc.ServiceRegistrar, srv DepartmentsServiceServer) {
	s.RegisterService(&DepartmentsService_ServiceDesc, srv)
}

func _DepartmentsService_ListDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentsServiceServer).ListDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/departmentsservice.DepartmentsService/listDepartments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentsServiceServer).ListDepartments(ctx, req.(*ListDepartmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepartmentsService_ServiceDesc is the grpc.ServiceDesc for DepartmentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepartmentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "departmentsservice.DepartmentsService",
	HandlerType: (*DepartmentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listDepartments",
			Handler:    _DepartmentsService_ListDepartments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "departments.proto",
}

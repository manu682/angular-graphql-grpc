// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package students_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentsServiceClient is the client API for StudentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentsServiceClient interface {
	ListStudents(ctx context.Context, in *ListStudentsRequest, opts ...grpc.CallOption) (*ListStudentsResponse, error)
	AddStudent(ctx context.Context, in *AddStudentsRequest, opts ...grpc.CallOption) (*AddStudentsResponse, error)
	UpdateStudent(ctx context.Context, in *UpdateStudentsRequest, opts ...grpc.CallOption) (*UpdateStudentsResponse, error)
	DeleteStudent(ctx context.Context, in *DeleteStudentsRequest, opts ...grpc.CallOption) (*DeleteStudentsResponse, error)
	GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*GetStudentResponse, error)
}

type studentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentsServiceClient(cc grpc.ClientConnInterface) StudentsServiceClient {
	return &studentsServiceClient{cc}
}

func (c *studentsServiceClient) ListStudents(ctx context.Context, in *ListStudentsRequest, opts ...grpc.CallOption) (*ListStudentsResponse, error) {
	out := new(ListStudentsResponse)
	err := c.cc.Invoke(ctx, "/studentsservice.StudentsService/listStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsServiceClient) AddStudent(ctx context.Context, in *AddStudentsRequest, opts ...grpc.CallOption) (*AddStudentsResponse, error) {
	out := new(AddStudentsResponse)
	err := c.cc.Invoke(ctx, "/studentsservice.StudentsService/addStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsServiceClient) UpdateStudent(ctx context.Context, in *UpdateStudentsRequest, opts ...grpc.CallOption) (*UpdateStudentsResponse, error) {
	out := new(UpdateStudentsResponse)
	err := c.cc.Invoke(ctx, "/studentsservice.StudentsService/updateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsServiceClient) DeleteStudent(ctx context.Context, in *DeleteStudentsRequest, opts ...grpc.CallOption) (*DeleteStudentsResponse, error) {
	out := new(DeleteStudentsResponse)
	err := c.cc.Invoke(ctx, "/studentsservice.StudentsService/deleteStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentsServiceClient) GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*GetStudentResponse, error) {
	out := new(GetStudentResponse)
	err := c.cc.Invoke(ctx, "/studentsservice.StudentsService/getStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentsServiceServer is the server API for StudentsService service.
// All implementations must embed UnimplementedStudentsServiceServer
// for forward compatibility
type StudentsServiceServer interface {
	ListStudents(context.Context, *ListStudentsRequest) (*ListStudentsResponse, error)
	AddStudent(context.Context, *AddStudentsRequest) (*AddStudentsResponse, error)
	UpdateStudent(context.Context, *UpdateStudentsRequest) (*UpdateStudentsResponse, error)
	DeleteStudent(context.Context, *DeleteStudentsRequest) (*DeleteStudentsResponse, error)
	GetStudent(context.Context, *GetStudentRequest) (*GetStudentResponse, error)
	mustEmbedUnimplementedStudentsServiceServer()
}

// UnimplementedStudentsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStudentsServiceServer struct {
}

func (UnimplementedStudentsServiceServer) ListStudents(context.Context, *ListStudentsRequest) (*ListStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudents not implemented")
}
func (UnimplementedStudentsServiceServer) AddStudent(context.Context, *AddStudentsRequest) (*AddStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudent not implemented")
}
func (UnimplementedStudentsServiceServer) UpdateStudent(context.Context, *UpdateStudentsRequest) (*UpdateStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedStudentsServiceServer) DeleteStudent(context.Context, *DeleteStudentsRequest) (*DeleteStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudent not implemented")
}
func (UnimplementedStudentsServiceServer) GetStudent(context.Context, *GetStudentRequest) (*GetStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}
func (UnimplementedStudentsServiceServer) mustEmbedUnimplementedStudentsServiceServer() {}

// UnsafeStudentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentsServiceServer will
// result in compilation errors.
type UnsafeStudentsServiceServer interface {
	mustEmbedUnimplementedStudentsServiceServer()
}

func RegisterStudentsServiceServer(s grpc.ServiceRegistrar, srv StudentsServiceServer) {
	s.RegisterService(&StudentsService_ServiceDesc, srv)
}

func _StudentsService_ListStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServiceServer).ListStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentsservice.StudentsService/listStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServiceServer).ListStudents(ctx, req.(*ListStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentsService_AddStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServiceServer).AddStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentsservice.StudentsService/addStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServiceServer).AddStudent(ctx, req.(*AddStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentsService_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServiceServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentsservice.StudentsService/updateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServiceServer).UpdateStudent(ctx, req.(*UpdateStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentsService_DeleteStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServiceServer).DeleteStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentsservice.StudentsService/deleteStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServiceServer).DeleteStudent(ctx, req.(*DeleteStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentsService_GetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentsServiceServer).GetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/studentsservice.StudentsService/getStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentsServiceServer).GetStudent(ctx, req.(*GetStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentsService_ServiceDesc is the grpc.ServiceDesc for StudentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "studentsservice.StudentsService",
	HandlerType: (*StudentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listStudents",
			Handler:    _StudentsService_ListStudents_Handler,
		},
		{
			MethodName: "addStudent",
			Handler:    _StudentsService_AddStudent_Handler,
		},
		{
			MethodName: "updateStudent",
			Handler:    _StudentsService_UpdateStudent_Handler,
		},
		{
			MethodName: "deleteStudent",
			Handler:    _StudentsService_DeleteStudent_Handler,
		},
		{
			MethodName: "getStudent",
			Handler:    _StudentsService_GetStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "students.proto",
}
